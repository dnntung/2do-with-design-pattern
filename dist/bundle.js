(()=>{"use strict";var t,e=function(){function t(t,e){this._controller=t,this._data=e}return t.prototype.restore=function(){this._controller.todoItems=this._data},t}(),o=function(){function t(){this._observers=[]}return t.prototype.subscribe=function(t){this._observers.push(t)},t.prototype.unsubscribe=function(t){this._observers=this._observers.filter((function(e){return e!==t}))},t.prototype.notify=function(t){this._observers.map((function(e){return e.update(t)}))},t}(),n=function(){function t(t,e,o){this._id=t,this._title=e,this._desc=o,this._createdAt=new Date,this._updatedAt=new Date,this._completed=!1}return Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"title",{get:function(){return this._title},set:function(t){this._title=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"desc",{get:function(){return this._desc},set:function(t){this._desc=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"completed",{get:function(){return this._completed},set:function(t){this._completed=t},enumerable:!1,configurable:!0}),t.prototype.update=function(t,e){this._title=t,this._desc=e,this._updatedAt=new Date},t}(),r=function(){function t(t){this._renderer=t}return t.prototype._saveToStorage=function(t){localStorage.setItem("todo_items",JSON.stringify(t))},t.prototype.update=function(t){this._saveToStorage(t),this._renderer.render(t)},t}(),i=function(){function t(){this._observerManager=new o;try{var t=JSON.parse(localStorage.getItem("todo_items"))||[];this.todoItems=t.map((function(t){return new n(t._id,t._title,t._desc)}))}catch(t){this._todoItems=[]}}return Object.defineProperty(t.prototype,"renderer",{set:function(t){this._observerManager.subscribe(new r(t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"todoItems",{get:function(){return this._todoItems},set:function(t){this._todoItems=t,this._observerManager.notify(this._todoItems)},enumerable:!1,configurable:!0}),t.getInstance=function(){return this._controller||(this._controller=new this),this._controller},t.prototype.createTodo=function(t,e){this._todoItems.push(new n(this._todoItems.length,t,e)),this._observerManager.notify(this._todoItems)},t.prototype.editTodo=function(t,e,o){this._todoItems.find((function(e){return e.id===t})).update(e,o),this._observerManager.notify(this._todoItems)},t.prototype.removeTodo=function(t){this._todoItems=this._todoItems.filter((function(e){return e.id!=t})),this._observerManager.notify(this._todoItems)},t.prototype.saveHistory=function(){this._history=new e(this,this._todoItems)},t.prototype.rollbackFromHistory=function(){this._history.restore()},t}(),s=function(){function t(){}return Object.defineProperty(t.prototype,"container",{get:function(){return this._container},set:function(t){this._container=t},enumerable:!1,configurable:!0}),t.prototype.resetContainer=function(){this._container.innerHTML=""},t.prototype.render=function(t){},t}(),c=(t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)},function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(t){var e=document.createElement("li");e.appendChild(this._renderTodoStatus(t.completed)),e.appendChild(this._renderTitle(t.title)),e.appendChild(this._renderSubtitle(t.desc)),this.container.appendChild(e)},e.prototype._renderTitle=function(t){var e=document.createElement("h5");return e.innerText=t,e},e.prototype._renderSubtitle=function(t){var e=document.createElement("p");return e.innerText=t,e},e.prototype._renderTodoStatus=function(t){var e=document.createElement("input");return e.setAttribute("type","checkbox"),e.checked=t,e},e}(s),p=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),d=function(t){function e(){var e=t.call(this)||this;return e._todoRenderer=new u,e}return p(e,t),e.prototype.render=function(e){var o=this,n=document.createElement("ul");this._todoRenderer.container=n,t.prototype.resetContainer.call(this),console.log("Rendering items..."),e.map((function(t){o._renderTodoItem(t)})),console.log("Adding items to container..."),this.container.appendChild(n),console.log("Done render items...")},e.prototype._renderTodoItem=function(t){this._todoRenderer.render(t)},e}(s);window.addEventListener("load",(function(){var t=i.getInstance(),e=new d;e.container=document.getElementById("todo-list"),t.renderer=e,console.log("Loaded")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQ3BCLElBQU1DLEVBQWNULFNBQVNDLGNBQWMsS0FHM0MsT0FGQVEsRUFBV0YsVUFBWUMsRUFFaEJDLEdBR0gsWUFBQU4sa0JBQVIsU0FBMEJyQyxHQUN0QixJQUFNNEMsRUFBYVYsU0FBU0MsY0FBYyxTQUkxQyxPQUhBUyxFQUFXQyxhQUFhLE9BQVEsWUFDaENELEVBQVdFLFFBQVU5QyxFQUVkNEMsR0FFZixFQWxDQSxDQUFzQ0csRywwZENDdEMsY0FHSSxtQkFDSSxjQUFPLEssT0FDUCxFQUFLQyxjQUFlLElBQUlDLEUsRUF5QmhDLE9BOUJzQyxPQVNsQyxZQUFBekMsT0FBQSxTQUFPbEMsR0FBUCxXQUNVNEUsRUFBU2hCLFNBQVNDLGNBQWMsTUFDdEM1RCxLQUFLeUUsY0FBY2xCLFVBQVlvQixFQUUvQixZQUFNbkIsZUFBYyxXQUVwQm9CLFFBQVFDLElBQUksc0JBRVo5RSxFQUFLYyxLQUFJLFNBQUMwQixHQUNOLEVBQUt1QyxnQkFBZ0J2QyxNQUd6QnFDLFFBQVFDLElBQUksZ0NBQ1o3RSxLQUFLdUQsVUFBVU0sWUFBWWMsR0FFM0JDLFFBQVFDLElBQUkseUJBR1IsWUFBQUMsZ0JBQVIsU0FBd0J2QyxHQUNwQnZDLEtBQUt5RSxjQUFjeEMsT0FBT00sSUFFbEMsRUE5QkEsQ0FBc0NpQyxHQ0R0Q08sT0FBT0MsaUJBQWlCLFFBQVEsV0FFNUIsSUFBTWxGLEVBQTZCbUYsRUFBZXJDLGNBRTVDbEIsRUFBNkIsSUFBSXdELEVBQ3ZDeEQsRUFBUzZCLFVBQVlJLFNBQVN3QixlQUFlLGFBQzdDckYsRUFBVzRCLFNBQVdBLEVBR3RCa0QsUUFBUUMsSUFBSSxjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0LXdpdGgtZGVzaWduLXBhdHRlcm4vLi9zcmMvbW9kdWxlcy9IaXN0b3J5LnRzIiwid2VicGFjazovL3RvZG8tbGlzdC13aXRoLWRlc2lnbi1wYXR0ZXJuLy4vc3JjL21vZHVsZXMvT2JzZXJ2ZXJNYW5hZ2VyLnRzIiwid2VicGFjazovL3RvZG8tbGlzdC13aXRoLWRlc2lnbi1wYXR0ZXJuLy4vc3JjL21vZHVsZXMvVG9kby50cyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qtd2l0aC1kZXNpZ24tcGF0dGVybi8uL3NyYy9tb2R1bGVzL1RvZG9PYnNlcnZlci50cyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qtd2l0aC1kZXNpZ24tcGF0dGVybi8uL3NyYy9tb2R1bGVzL1RvZG9Db250cm9sbGVyLnRzIiwid2VicGFjazovL3RvZG8tbGlzdC13aXRoLWRlc2lnbi1wYXR0ZXJuLy4vc3JjL2ludGVyZmFjZXMvUmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LXdpdGgtZGVzaWduLXBhdHRlcm4vLi9zcmMvbW9kdWxlcy9Ub2RvSXRlbVJlbmRlcmVyLnRzIiwid2VicGFjazovL3RvZG8tbGlzdC13aXRoLWRlc2lnbi1wYXR0ZXJuLy4vc3JjL21vZHVsZXMvVG9kb0xpc3RSZW5kZXJlci50cyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qtd2l0aC1kZXNpZ24tcGF0dGVybi8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaXN0b3J5U25hcHNob3QgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9IaXN0b3J5U25hcHNob3RcIjtcclxuaW1wb3J0IHsgVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvXCI7XHJcbmltcG9ydCB7IFRvZG9Db250cm9sbGVyIH0gZnJvbSBcIi4vVG9kb0NvbnRyb2xsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2RvSGlzdG9yeVNuYXBzaG90IGltcGxlbWVudHMgSGlzdG9yeVNuYXBzaG90IHtcclxuICAgIHByaXZhdGUgX2NvbnRyb2xsZXI6IFRvZG9Db250cm9sbGVyO1xyXG4gICAgcHJpdmF0ZSBfZGF0YTogVG9kb0l0ZW1bXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRyb2xsZXI6IFRvZG9Db250cm9sbGVyLCBkYXRhOiBUb2RvSXRlbVtdKSB7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGFcclxuICAgIH1cclxuXHJcbiAgICByZXN0b3JlKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2xsZXIudG9kb0l0ZW1zID0gdGhpcy5fZGF0YVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9PYnNlcnZlclwiXHJcbmltcG9ydCB7IFRvZG9PYnNlcnZlciB9IGZyb20gXCIuL1RvZG9PYnNlcnZlclwiXHJcblxyXG5leHBvcnQgY2xhc3MgT2JzZXJ2ZXJNYW5hZ2VyIHtcclxuICAgIC8vIE9ic2VydmVyXHJcbiAgICBwcml2YXRlICBfb2JzZXJ2ZXJzOiAgT2JzZXJ2ZXJbXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVycyA9IFtdXHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKCBvYnNlcnZlcjogT2JzZXJ2ZXIpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChvYnNlcnZlcilcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdW5zdWJzY3JpYmUob2JzZXJ2ZXI6IE9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzLmZpbHRlcihvID0+IG8hPT0gb2JzZXJ2ZXIpXHJcbiAgICB9XHJcblxyXG4gICAgbm90aWZ5KGRhdGE6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVycy5tYXAobyA9PiBvLnVwZGF0ZShkYXRhKSlcclxuICAgIH1cclxufVxyXG4gICAgIiwiXHJcbmV4cG9ydCBjbGFzcyBUb2RvSXRlbSAge1xyXG4gICAgcHJpdmF0ZSBfaWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3RpdGxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9kZXNjOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9jcmVhdGVkQXQ6IERhdGU7XHJcbiAgICBwcml2YXRlIF91cGRhdGVkQXQ6IERhdGU7XHJcbiAgICBwcml2YXRlIF9jb21wbGV0ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgdGl0bGU6IHN0cmluZywgZGVzYzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlXHJcbiAgICAgICAgdGhpcy5fZGVzYyA9IGRlc2NcclxuICAgICAgICB0aGlzLl9jcmVhdGVkQXQgPSBuZXcgRGF0ZSgpXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlZEF0ID0gbmV3IERhdGUoKVxyXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlZCA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZFxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0aXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGVcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVzYygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb21wbGV0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBsZXRlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCB0aXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZVxyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZXNjKGRlc2M6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2Rlc2MgPSBkZXNjXHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGNvbXBsZXRlZChjb21wbGV0ZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICAgdGhpcy5fY29tcGxldGVkID0gY29tcGxldGVkXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHRpdGxlOiBzdHJpbmcsIGRlc2M6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlID0gdGl0bGVcclxuICAgICAgICB0aGlzLl9kZXNjID0gZGVzY1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRBdCA9IG5ldyBEYXRlKClcclxuICAgIH1cclxufSIsImltcG9ydCB7IE9ic2VydmVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvT2JzZXJ2ZXJcIjtcclxuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9SZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9cIjtcclxuaW1wb3J0IHsgVG9kb0xpc3RSZW5kZXJlciB9IGZyb20gXCIuL1RvZG9MaXN0UmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2RvT2JzZXJ2ZXIgaW1wbGVtZW50cyBPYnNlcnZlciB7XHJcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogVG9kb0xpc3RSZW5kZXJlclxyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogVG9kb0xpc3RSZW5kZXJlcikge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXJcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfc2F2ZVRvU3RvcmFnZShkYXRhOiBUb2RvSXRlbVtdKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b2RvX2l0ZW1zXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkYXRhOiBUb2RvSXRlbVtdKSB7XHJcbiAgICAgICAgdGhpcy5fc2F2ZVRvU3RvcmFnZShkYXRhKVxyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlcihkYXRhKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9SZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBUb2RvSGlzdG9yeVNuYXBzaG90IH0gZnJvbSBcIi4vSGlzdG9yeVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZlck1hbmFnZXIgfSBmcm9tIFwiLi9PYnNlcnZlck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvXCI7XHJcbmltcG9ydCB7IFRvZG9MaXN0UmVuZGVyZXIgfSBmcm9tIFwiLi9Ub2RvTGlzdFJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IFRvZG9PYnNlcnZlciB9IGZyb20gXCIuL1RvZG9PYnNlcnZlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvZG9Db250cm9sbGVyIHtcclxuICAgIHByaXZhdGUgX3RvZG9JdGVtczogVG9kb0l0ZW1bXTtcclxuICAgIHByaXZhdGUgc3RhdGljIF9jb250cm9sbGVyOiBUb2RvQ29udHJvbGxlcjtcclxuICAgIHByaXZhdGUgX2hpc3Rvcnk6IFRvZG9IaXN0b3J5U25hcHNob3RcclxuICAgIHByaXZhdGUgX29ic2VydmVyTWFuYWdlcjogT2JzZXJ2ZXJNYW5hZ2VyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVyTWFuYWdlciA9IG5ldyBPYnNlcnZlck1hbmFnZXIoKVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VJdGVtczogYW55W10gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9kb19pdGVtc1wiKSkgfHwgW11cclxuICAgICAgICAgICAgdGhpcy50b2RvSXRlbXMgPSAgc3RvcmFnZUl0ZW1zLm1hcChpdGVtID0+IG5ldyBUb2RvSXRlbShpdGVtLl9pZCwgaXRlbS5fdGl0bGUsIGl0ZW0uX2Rlc2MpKVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9kb0l0ZW1zID0gW11cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJlbmRlcmVyKHJlbmRlcmVyOiBUb2RvTGlzdFJlbmRlcmVyKSB7XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJNYW5hZ2VyLnN1YnNjcmliZShuZXcgVG9kb09ic2VydmVyKHJlbmRlcmVyKSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdG9kb0l0ZW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b2RvSXRlbXNcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdG9kb0l0ZW1zKHRvZG9JdGVtczogVG9kb0l0ZW1bXSkge1xyXG4gICAgICAgIHRoaXMuX3RvZG9JdGVtcyA9IHRvZG9JdGVtc1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVyTWFuYWdlci5ub3RpZnkodGhpcy5fdG9kb0l0ZW1zKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNpbmdsZXRvbiBcclxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBUb2RvQ29udHJvbGxlciB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xsZXIgPSBuZXcgdGhpcygpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbGxlclxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVRvZG8odGl0bGU6IHN0cmluZywgZGVzYzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdG9kb0l0ZW1zLnB1c2gobmV3IFRvZG9JdGVtKHRoaXMuX3RvZG9JdGVtcy5sZW5ndGgsIHRpdGxlLCBkZXNjKSlcclxuICAgICAgICB0aGlzLl9vYnNlcnZlck1hbmFnZXIubm90aWZ5KHRoaXMuX3RvZG9JdGVtcylcclxuICAgIH1cclxuXHJcbiAgICBlZGl0VG9kbyhpZDogbnVtYmVyLCB0aXRsZTogc3RyaW5nLCBkZXNjOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB0b2RvSXRlbTogVG9kb0l0ZW0gPSB0aGlzLl90b2RvSXRlbXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKVxyXG4gICAgICAgIHRvZG9JdGVtLnVwZGF0ZSh0aXRsZSwgZGVzYylcclxuICAgICAgICB0aGlzLl9vYnNlcnZlck1hbmFnZXIubm90aWZ5KHRoaXMuX3RvZG9JdGVtcylcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVUb2RvKGlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl90b2RvSXRlbXM9IHRoaXMuX3RvZG9JdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkICE9IGlkKVxyXG4gICAgICAgIHRoaXMuX29ic2VydmVyTWFuYWdlci5ub3RpZnkodGhpcy5fdG9kb0l0ZW1zKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lbWVudG8gXHJcbiAgICBzYXZlSGlzdG9yeSgpIHtcclxuICAgICAgICB0aGlzLl9oaXN0b3J5ID0gIG5ldyBUb2RvSGlzdG9yeVNuYXBzaG90KHRoaXMsIHRoaXMuX3RvZG9JdGVtcylcclxuICAgIH1cclxuXHJcbiAgICByb2xsYmFja0Zyb21IaXN0b3J5KCkge1xyXG4gICAgICAgIHRoaXMuX2hpc3RvcnkucmVzdG9yZSgpXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyZXI8VD4ge1xyXG4gICAgcHJpdmF0ZSBfY29udGFpbmVyOiBIVE1MRWxlbWVudFxyXG5cclxuICAgIHNldCBjb250YWluZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lclxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb250YWluZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lclxyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0Q29udGFpbmVyKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICB9XHJcblxyXG4gICAgIHJlbmRlcihkYXRhOiBUKTogdm9pZCB7fVxyXG59IiwiaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9SZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2RvSXRlbVJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXI8VG9kb0l0ZW0+IHtcclxuXHJcbiAgICAvLyBGYWNhZGUgXHJcbiAgICByZW5kZXIoZGF0YTogVG9kb0l0ZW0pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpXHJcblxyXG4gICAgICAgIGl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fcmVuZGVyVG9kb1N0YXR1cyhkYXRhLmNvbXBsZXRlZCkpXHJcbiAgICAgICAgaXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9yZW5kZXJUaXRsZShkYXRhLnRpdGxlKSlcclxuICAgICAgICBpdGVtQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3JlbmRlclN1YnRpdGxlKGRhdGEuZGVzYykpXHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW1Db250YWluZXIpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyVGl0bGUodGl0bGU6IHN0cmluZyk6SFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IHRpdGxlRWwgPSAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImg1XCIpXHJcbiAgICAgICAgdGl0bGVFbC5pbm5lclRleHQgPSB0aXRsZVxyXG5cclxuICAgICAgICByZXR1cm4gdGl0bGVFbFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JlbmRlclN1YnRpdGxlKHN1YnRpdGxlOiBzdHJpbmcpOkhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBzdWJ0aXRsZUVsID0gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXHJcbiAgICAgICAgc3VidGl0bGVFbC5pbm5lclRleHQgPSBzdWJ0aXRsZVxyXG5cclxuICAgICAgICByZXR1cm4gc3VidGl0bGVFbFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JlbmRlclRvZG9TdGF0dXMoY29tcGxldGVkOiBib29sZWFuKTpIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgY2hlY2tCb3hFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxyXG4gICAgICAgIGNoZWNrQm94RWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xyXG4gICAgICAgIGNoZWNrQm94RWwuY2hlY2tlZCA9IGNvbXBsZXRlZFxyXG5cclxuICAgICAgICByZXR1cm4gY2hlY2tCb3hFbFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9SZW5kZXJlclwiXHJcbmltcG9ydCB7IFRvZG9JdGVtIH0gZnJvbSBcIi4vVG9kb1wiXHJcbmltcG9ydCB7IFRvZG9JdGVtUmVuZGVyZXIgfSBmcm9tIFwiLi9Ub2RvSXRlbVJlbmRlcmVyXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2RvTGlzdFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXI8VG9kb0l0ZW1bXT4ge1xyXG4gICAgcHJpdmF0ZSBfdG9kb1JlbmRlcmVyOiBUb2RvSXRlbVJlbmRlcmVyXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIHRoaXMuX3RvZG9SZW5kZXJlciA9bmV3IFRvZG9JdGVtUmVuZGVyZXIoKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGYWNhZGUgXHJcbiAgICByZW5kZXIoZGF0YTogVG9kb0l0ZW1bXSkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKVxyXG4gICAgICAgIHRoaXMuX3RvZG9SZW5kZXJlci5jb250YWluZXIgPSBsaXN0RWxcclxuXHJcbiAgICAgICAgc3VwZXIucmVzZXRDb250YWluZXIoKVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBpdGVtcy4uLlwiKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGRhdGEubWFwKChpdGVtOiBUb2RvSXRlbSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUb2RvSXRlbShpdGVtKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQWRkaW5nIGl0ZW1zIHRvIGNvbnRhaW5lci4uLlwiKVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGxpc3RFbClcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJEb25lIHJlbmRlciBpdGVtcy4uLlwiKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JlbmRlclRvZG9JdGVtKGl0ZW06IFRvZG9JdGVtKSAge1xyXG4gICAgICAgIHRoaXMuX3RvZG9SZW5kZXJlci5yZW5kZXIoaXRlbSlcclxuICAgIH1cclxufSIsImltcG9ydCB7IFRvZG9Db250cm9sbGVyIH0gZnJvbSBcIi4vbW9kdWxlcy9Ub2RvQ29udHJvbGxlclwiXHJcbmltcG9ydCB7IFRvZG9MaXN0UmVuZGVyZXIgfSBmcm9tIFwiLi9tb2R1bGVzL1RvZG9MaXN0UmVuZGVyZXJcIlxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBjb250cm9sbGVyOiBUb2RvQ29udHJvbGxlciA9IFRvZG9Db250cm9sbGVyLmdldEluc3RhbmNlKClcclxuICAgIFxyXG4gICAgY29uc3QgcmVuZGVyZXI6IFRvZG9MaXN0UmVuZGVyZXIgPSBuZXcgVG9kb0xpc3RSZW5kZXJlcigpXHJcbiAgICByZW5kZXJlci5jb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZG8tbGlzdFwiKVxyXG4gICAgY29udHJvbGxlci5yZW5kZXJlciA9IHJlbmRlcmVyXHJcblxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkXCIpXHJcblxyXG59KSJdLCJuYW1lcyI6WyJjb250cm9sbGVyIiwiZGF0YSIsInRoaXMiLCJfY29udHJvbGxlciIsIl9kYXRhIiwicmVzdG9yZSIsInRvZG9JdGVtcyIsIl9vYnNlcnZlcnMiLCJzdWJzY3JpYmUiLCJvYnNlcnZlciIsInB1c2giLCJ1bnN1YnNjcmliZSIsImZpbHRlciIsIm8iLCJub3RpZnkiLCJtYXAiLCJ1cGRhdGUiLCJpZCIsInRpdGxlIiwiZGVzYyIsIl9pZCIsIl90aXRsZSIsIl9kZXNjIiwiX2NyZWF0ZWRBdCIsIkRhdGUiLCJfdXBkYXRlZEF0IiwiX2NvbXBsZXRlZCIsImNvbXBsZXRlZCIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX3NhdmVUb1N0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbmRlciIsIl9vYnNlcnZlck1hbmFnZXIiLCJPYnNlcnZlck1hbmFnZXIiLCJzdG9yYWdlSXRlbXMiLCJwYXJzZSIsImdldEl0ZW0iLCJpdGVtIiwiVG9kb0l0ZW0iLCJlcnIiLCJfdG9kb0l0ZW1zIiwiVG9kb09ic2VydmVyIiwiZ2V0SW5zdGFuY2UiLCJjcmVhdGVUb2RvIiwibGVuZ3RoIiwiZWRpdFRvZG8iLCJmaW5kIiwicmVtb3ZlVG9kbyIsInNhdmVIaXN0b3J5IiwiX2hpc3RvcnkiLCJUb2RvSGlzdG9yeVNuYXBzaG90Iiwicm9sbGJhY2tGcm9tSGlzdG9yeSIsIl9jb250YWluZXIiLCJjb250YWluZXIiLCJyZXNldENvbnRhaW5lciIsImlubmVySFRNTCIsIml0ZW1Db250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsIl9yZW5kZXJUb2RvU3RhdHVzIiwiX3JlbmRlclRpdGxlIiwiX3JlbmRlclN1YnRpdGxlIiwidGl0bGVFbCIsImlubmVyVGV4dCIsInN1YnRpdGxlIiwic3VidGl0bGVFbCIsImNoZWNrQm94RWwiLCJzZXRBdHRyaWJ1dGUiLCJjaGVja2VkIiwiUmVuZGVyZXIiLCJfdG9kb1JlbmRlcmVyIiwiVG9kb0l0ZW1SZW5kZXJlciIsImxpc3RFbCIsImNvbnNvbGUiLCJsb2ciLCJfcmVuZGVyVG9kb0l0ZW0iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiVG9kb0NvbnRyb2xsZXIiLCJUb2RvTGlzdFJlbmRlcmVyIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9